/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.brettm.holiday.holidayApi.apis

import org.openapitools.client.models.LongWeekendV3Dto

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import kotlinx.serialization.*
import kotlinx.serialization.encoding.*

open class LongWeekendApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    constructor(
        baseUrl: String
    ): super(baseUrl = baseUrl, httpClientEngine = null, httpClientConfig = null, jsonBlock = ApiClient.JSON_DEFAULT)

    /**
     * Get long weekends for a given country
     * 
     * @param year 
     * @param countryCode 
     * @return kotlin.collections.List<LongWeekendV3Dto>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun longWeekendLongWeekend(year: kotlin.Int, countryCode: kotlin.String): HttpResponse<kotlin.collections.List<LongWeekendV3Dto>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v3/LongWeekend/{year}/{countryCode}".replace("{" + "year" + "}", "$year").replace("{" + "countryCode" + "}", "$countryCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<LongWeekendLongWeekendResponse>().map { value }
    }

    @Serializable
    private class LongWeekendLongWeekendResponse(val value: List<LongWeekendV3Dto>) {
        @Serializer(LongWeekendLongWeekendResponse::class)
        companion object : KSerializer<LongWeekendLongWeekendResponse> {
            private val serializer: KSerializer<List<LongWeekendV3Dto>> = serializer<List<LongWeekendV3Dto>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: LongWeekendLongWeekendResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = LongWeekendLongWeekendResponse(serializer.deserialize(decoder))
        }
    }

}
